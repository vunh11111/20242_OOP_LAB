*****************Lab 03******************
Question 1 (Part 14): Which classes are aggregates of other classes? Checking all constructors of whole classes if they 
initialize for their parts? 
Answer 1: These are classes that probably contain or manage instances of other classes:
- Cart.java (hust.soict.hedspi.aims.cart) contains a list of Media items (e.g., Book, DigitalVideoDisc, CompactDisc) — typical for a shopping cart.
- Store.java (hust.soict.hedspi.aims.store) aggregates Media items it sells.
- CompactDisc.java (hust.soict.hedspi.aims.media) contain a list of Track objects — CD is typically composed of tracks.
- Aims_V2.java (hust.soict.hedspi.aims): the main entry point, orchestrating the use of Store, Cart, etc.
- Media.java (base class, probably abstract): superclass of Book, DigitalVideoDisc, and CompactDisc.
- Book.java, DigitalVideoDisc.java, CompactDisc.java: subclasses of Media.
- Track.java: used inside CompactDisc.
Question 2 (Part 17):
a. What class should implement the Comparable interface?
b. In those classes, how should you implement the compareTo()method to reflect the ordering that we want? 
c.Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach? 
d. Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this? 
Answer 2: 
a.Lớp Media phải triển khai Comparable<Media>.
- Vì tất cả các mục phương tiện (Book, DigitalVideoDisc, CompactDisc) có khả năng kế thừa từ Media, nên việc xác định một quy tắc so sánh chung trong Media là hợp lý.
- Theo cách này, có thể sắp xếp danh sách hỗn hợp các mục phương tiện (ví dụ: giỏ hàng có DVD và sách) bằng cách sử dụng thứ tự tự nhiên của chúng.
b. Ví dụ: Sắp xếp theo tiêu đề, sau đó là giá.
@Override
public int compareTo(Media other) {
	int titleCompare = this.getTitle().compareToIgnoreCase(other.getTitle());
	if (titleCompare != 0) {
		return titleCompare;
	}
	return Float.compare(this.getCost(), other.getCost());
}
Đầu tiên, hãy so sánh các tiêu đề (bỏ qua chữ hoa chữ thường).
Nếu các tiêu đề bằng nhau, hãy so sánh giá.
c. Không trực tiếp với Comparable.
- Comparable định nghĩa một "thứ tự tự nhiên".
- Để hỗ trợ nhiều thứ tự, bạn nên sử dụng các đối tượng Comparator thay thế.
Comparator<Media> byCostThenTitle = Comparator
.comparing(Media::getCost)
.thenComparing(Media::getTitle);
Vậy:
Comparable → chỉ một quy tắc
Comparator → nhiều quy tắc tùy chỉnh ✔
d. Hai tùy chọn:
Tùy chọn 1: Ghi đè compareTo() trong DigitalVideoDisc
Tùy chọn 2: Sử dụng Comparator thay thế (linh hoạt hơn)

*****************Lab 02******************
Question 1 (Part 10): If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
Answer 1: Nếu cả hai constructor chỉ có tham số String, Java sẽ không biết constructor nào cần gọi. Để phân biệt, cần đảm bảo số lượng tham số truyền vào của 2 constructor đó khác nhau, hoặc các kiểu dữ liệu tham số truyền vào có sự khác nhau.

Question 2 (Part 14): Try to add a method addDigitalVideoDisc which allows to pass an arbitrary number of arguments for dvd. Compared to an array parameter. What do you prefer in this case?
Answer 2:  
 	//Method addDigitalVideoDisc() which allows to pass an arbitrary number of arguments for dvd.
//    public void addDigitalVideoDisc(DigitalVideoDisc... dvds) {
//        for (DigitalVideoDisc dvd : dvds) {
//            if (qtyOrdered < MAX_NUMBERS_ORDERED) {
//                itemsOrdered[qtyOrdered++] = dvd;
//                System.out.println("Added: " + dvd.getTitle());
//            } else {
//                System.out.println("The order is full! Cannot add " + dvd.getTitle());
//                break; // Stop adding if order is full
//            }
//        }
//    }
=> Khi gọi phương thức với varargs, ta có thể truyền trực tiếp nhiều đối tượng DigitalVideoDisc mà không cần tạo mảng trước. Ngoài ra, varargs cho phép truyền từ 0 đến N đối số, trong khi khi dùng mảng, người gọi phải tạo mảng dù có thể chỉ thêm 1 DVD.

Question 3 (Part 15): After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain? After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?
Answer 3: 
-- swap() không thay đổi giá trị thực sự của jungleDVD và cinderellaDVD, chỉ có tham số trong phương thức thay đổi, còn tham chiếu bên ngoài vẫn giữ nguyên.
-- changeTitle() thay đổi thuộc tính bên trong đối tượng, vì nó thao tác trực tiếp lên vùng nhớ của DigitalVideoDisc. Nhưng việc tạo đối tượng mới không ảnh hưởng đến jungleDVD vì chỉ dvd thay đổi tham chiếu, còn jungleDVD vẫn trỏ đến đối tượng cũ.

Question 4 (Part 15): Is JAVA a Pass by Value or a Pass by Reference programming language?
Answer 4: JAVA is always a pass by value programming language.


